import { createSlice } from '@reduxjs/toolkit';
import { TodoListDarkTheme } from '../../JSS_StyleComponent/Themes/TodoListDarkTheme';
import { TodoListLightTheme } from '../../JSS_StyleComponent/Themes/TodoListLightTheme';
import { TodoListPrimaryTheme } from '../../JSS_StyleComponent/Themes/TodoListPrimaryTheme';

const initialState = {
  theme: TodoListLightTheme,
  taskList: [
    { id: "task-1", taskName: "task 1", done: true },
    { id: "task-2", taskName: "task 2", done: false },
    { id: "task-3", taskName: "task 3", done: true },
    { id: "task-4", taskName: "task 4", done: false },
  ]
};


export const counterSlice = createSlice({
  name: 'counter',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    increment: (state) => {
      // Redux Toolkit allows us to write "mutating" logic in reducers. It
      // doesn't actually mutate the state because it uses the Immer library,
      // which detects changes to a "draft state" and produces a brand new
      // immutable state based off those changes
      state.value += 1;
    },
    decrement: (state) => {
      state.value -= 1;
    },
    // Use the PayloadAction type to declare the contents of `action.payload`
    incrementByAmount: (state, action) => {
      state.value += action.payload;
    },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.

});

export const { increment, decrement, incrementByAmount } = counterSlice.actions;




export default counterSlice.reducer;
